# handlers/commands.py

import logging

from aiogram import Router, types, Bot
from aiogram.filters import Command

import config
from keyboards import get_status_keyboard
from utils.status_manager import StatusManager
from core.database import Database

router = Router()
logger = logging.getLogger(__name__)
db = Database()

def build_welcome_text() -> str:
    return (
        "<b>ü§ñ AutoCouriersStatusBot</b>\n\n"
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤.\n\n"
        "‚û°Ô∏è –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:\n"
        "   üè† ¬´–ë–∞–∑–∞¬ª      ‚Äî –≤—ã –Ω–∞ —Å–∫–ª–∞–¥–µ;\n"
        "   üöö ¬´–£–µ—Ö–∞–ª¬ª     ‚Äî –≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ;\n"
        "   üîß ¬´–°–ª–æ–º–∞–ª—Å—è¬ª  ‚Äî —É –≤–∞—Å –ø–æ–ª–æ–º–∫–∞;\n"
        "   üìã ¬´–ü–æ –¥–µ–ª–∞–º¬ª  ‚Äî –≤—ã –∑–∞–Ω—è—Ç—ã;\n"
        "   ‚õΩ ¬´–ó–∞–ø—Ä–∞–≤–∫–∞¬ª  ‚Äî –≤—ã –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ.\n\n"
        f"‚è∞ –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å {config.WORK_START_STR} –¥–æ {config.WORK_END_STR} ({config.TIMEZONE}).\n\n"
        "–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "  ‚Ä¢ /status ‚Äî —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ –±–∞–∑–µ;\n"
        "  ‚Ä¢ /help   ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."
    )

async def ensure_started(message: types.Message) -> bool:
    uid = message.from_user.id
    if not db.has_started(uid):
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return False
    return True

@router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    db.set_started(message.from_user.id)
    logger.info(f"/start –æ—Ç {message.from_user.id}")
    text = build_welcome_text()
    if message.chat.type in ("group", "supergroup"):
        await message.answer(text, reply_markup=get_status_keyboard())
    else:
        await message.answer(text)

@router.message(Command("help"))
async def cmd_help(message: types.Message, bot: Bot):
    if not await ensure_started(message):
        return

    HELP_TEXT = (
        "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è AutoCouriers StatusBot*\n\n"
        "1Ô∏è‚É£ –í –≥—Ä—É–ø–ø–µ –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
        "   üè† –ë–∞–∑–∞, üöö –£–µ—Ö–∞–ª, üîß –°–ª–æ–º–∞–ª—Å—è,\n"
        "   üìã –ü–æ –¥–µ–ª–∞–º, ‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞\n\n"
        "2Ô∏è‚É£ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º ¬´–ë–∞–∑–∞¬ª –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ª–æ–∫–∞—Ü–∏—é.\n"
        "3Ô∏è‚É£ /status –≤—ã–¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –ª–∏—á–∫—É.\n"
        f"4Ô∏è‚É£ –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å {config.WORK_START_STR} –¥–æ {config.WORK_END_STR}."
    )
    try:
        await bot.send_message(message.from_user.id, HELP_TEXT, parse_mode="Markdown")
        await message.reply("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°.")
    except:
        await message.reply("‚ùó –û—Ç–∫—Ä–æ–π—Ç–µ –õ–° —Å–æ –º–Ω–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /help.")

@router.message(Command("status"))
async def cmd_status(message: types.Message, bot: Bot):
    if not await ensure_started(message):
        return

    if message.from_user.id not in config.AUTHORIZED_IDS:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    report = StatusManager().get_report()
    try:
        await bot.send_message(message.from_user.id, report, parse_mode="HTML")
        await message.reply("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°.")
    except:
        await message.reply("‚ùó –û—Ç–∫—Ä–æ–π—Ç–µ –õ–° —Å–æ –º–Ω–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /status.")
