# handlers/commands.py

import logging
import time
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums.chat_type import ChatType
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, PROMOTED_TRANSITION

import config
from keyboards import get_status_keyboard
from utils.status_manager import StatusManager
from core.database import Database
from utils.time_utils import get_shift_start_timestamp

import re

router = Router()
logger = logging.getLogger(__name__)
db = Database()

# —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω)
BAD_WORDS = ["–±–∞–∑–∞", "baza", "base", "uehal", "uexal", "yehal", "yexal", "—É–µ—Ö–∞–ª", "–ø–æ –¥–µ–ª–∞–º", "–∑–∞–ø—Ä–∞–≤–∫–∞", "azs", "azc", "–∞–∑—Å"]

@router.message(lambda m: isinstance(m.text, str) and any(
    re.search(rf"\b{w}\b", m.text, re.IGNORECASE) for w in BAD_WORDS
))
async def catch_free_text(m: types.Message, bot: Bot):
    """
    –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤ –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ‚Äî
    —É–¥–∞–ª—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—É–±–ª–∏–∫—É–µ–º ¬´–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user = m.from_user
    text = m.text.strip().lower()
    # –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–ª—é—á
    for w in BAD_WORDS:
        if re.search(rf"\b{w}\b", text):
            keyword = w
            break
    labels = {
        "–±–∞–∑–∞":     "üè† –ë–∞–∑–∞",
        "baza":     "üè† –ë–∞–∑–∞",
        "base":     "üè† –ë–∞–∑–∞",
        "—É–µ—Ö–∞–ª":    "üöö –£–µ—Ö–∞–ª",
        "uehal":    "üöö –£–µ—Ö–∞–ª",
        "uexal":    "üöö –£–µ—Ö–∞–ª",
        "yehal":    "üöö –£–µ—Ö–∞–ª",
        "yexal":    "üöö –£–µ—Ö–∞–ª",
        "—Å–ª–æ–º–∞–ª—Å—è": "üîß –°–ª–æ–º–∞–ª—Å—è",
        "–ø–æ –¥–µ–ª–∞–º": "üìã –ü–æ –¥–µ–ª–∞–º",
        "–∑–∞–ø—Ä–∞–≤–∫–∞": "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞",
        "–∞–∑—Å":      "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞",
        "azc":      "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞",
        "azs":      "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞",
    }
    status_label = labels.get(keyword, keyword)
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await m.delete()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db.save_status(user.id, status_label)
    # –ø—É–±–ª–∏–∫—É–µ–º –≤ —á–∞—Ç
    await bot.send_message(
        m.chat.id,
        f"{user.full_name} ‚Äî {status_label}"
    )
    return

@router.my_chat_member(
    ChatMemberUpdatedFilter(member_status_changed=PROMOTED_TRANSITION)
)
async def on_bot_promoted(my_chat_member: types.ChatMemberUpdated, bot: Bot):
    """
    –ö–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∞–¥–º–∏–Ω‚Äë–ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ ‚Äî
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —à–ª—ë–º –∏ –ø–∏–Ω–∏–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = my_chat_member.chat.id
    text = build_welcome_text()
    sent = await bot.send_message(chat_id, text, reply_markup=build_welcome_buttons())
    try:
        await bot.unpin_chat_message(chat_id)
    except:
        pass
    await bot.pin_chat_message(chat_id, sent.message_id)

def build_welcome_text() -> str:
    return (
        "<b>ü§ñ AutoCouriersStatusBot</b>\n\n"
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤.\n\n"
        "‚û°Ô∏è –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:\n"
        "   üè† ¬´–ë–∞–∑–∞¬ª      ‚Äî –≤—ã –Ω–∞ —Å–∫–ª–∞–¥–µ;\n"
        "   üöö ¬´–£–µ—Ö–∞–ª¬ª     ‚Äî –≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ;\n"
        "   üîß ¬´–°–ª–æ–º–∞–ª—Å—è¬ª  ‚Äî —É –≤–∞—Å –ø–æ–ª–æ–º–∫–∞;\n"
        "   üìã ¬´–ü–æ –¥–µ–ª–∞–º¬ª  ‚Äî –≤—ã –∑–∞–Ω—è—Ç—ã;\n"
        "   ‚õΩ ¬´–ó–∞–ø—Ä–∞–≤–∫–∞¬ª  ‚Äî –≤—ã –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ.\n\n"
        f"‚è∞ –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å {config.WORK_START_STR} –¥–æ {config.WORK_END_STR} ({config.TIMEZONE}).\n\n"
        "üëá –ù–∏–∂–µ ‚Äî –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–º–æ—â–∏ –∏ –æ—Ç—á—ë—Ç—É:"
    )

def build_welcome_buttons() -> InlineKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –æ–±—â–∏–π inline-–∫–µ–π—Å: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî
    –∫–Ω–æ–ø–∫–∏ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª/¬´–°—Ç–∞—Ç—É—Å¬ª, –¥–∞–ª–µ–µ ‚Äî
    —Å—Ç—Ä–æ–∫–∏ –∏–∑ get_status_keyboard().
    """
    status_kb = get_status_keyboard()
    if not status_kb.inline_keyboard:
        logger.warning("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        status_rows = []
    else:
        status_rows = status_kb.inline_keyboard

    header = [
        InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_help"),
        InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å",      callback_data="show_status"),
        InlineKeyboardButton(text="‚õ¥ –õ–∞–π—Ç –•–∞—É—Å 28", callback_data="lighthouse"),
    ]
    all_rows = [header] + status_rows
    return InlineKeyboardMarkup(inline_keyboard=all_rows)

async def ensure_started(message: types.Message) -> bool:
    uid = message.from_user.id
    if not db.has_started(uid):
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return False
    return True

@router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É
    await message.delete()

    # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: –æ–¥–∏–Ω /start –∑–∞ —Å–º–µ–Ω—É
    if message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
        now_ts = time.time()
        shift_start_ts = get_shift_start_timestamp()
        last_ts = db.get_global_start()

        if last_ts is None or last_ts < shift_start_ts:
            # –ü–µ—Ä–≤—ã–π /start –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            db.set_global_start(now_ts)
            db.set_started(message.from_user.id)
            logger.info(f"–ü–µ—Ä–≤—ã–π /start –∑–∞ —Å–º–µ–Ω—É –æ—Ç {message.from_user.id}")

            text = build_welcome_text()
            sent = await message.answer(text, reply_markup=build_welcome_buttons())
            # –ü–µ—Ä–µ-–ø–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await bot.unpin_chat_message(message.chat.id)
                await bot.pin_chat_message(message.chat.id, sent.message_id)
            except Exception:
                pass
        # –∏–Ω–∞—á–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # –õ–°: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type == ChatType.PRIVATE:
        try:
            member = await bot.get_chat_member(config.GROUP_CHAT_ID, message.from_user.id)
        except Exception:
            member = None
        if not member or member.status in ("left", "kicked"):
            # –æ—Ç–∫–∞–∑ ¬´—Å–ª—É—á–∞–π–Ω–æ–º—É –ø—Ä–æ—Ö–æ–∂–µ–º—É¬ª
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞.")
            return
        # —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        text = build_welcome_text()
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_help"),
            InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å",       callback_data="show_status"),
            InlineKeyboardButton(text="‚õ¥ Lighthouse‚ÄØ28", callback_data="lighthouse"),
        ]])
        await message.answer(text, reply_markup=kb)
        return

    # –ø—Ä–æ—á–∏–µ —Ç–∏–ø—ã —á–∞—Ç–æ–≤ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

# ‚Äî‚Äî‚Äî –ü–µ—Ä–µ—Ö–≤–∞—Ç /help –≤ –≥—Ä—É–ø–ø–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –∏ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ‚Äî‚Äî‚Äî
@router.message(Command("help"), lambda m: m.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP))
async def _help_group(m: types.Message, bot: Bot):
    await m.delete()
    await m.answer("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å.")

@router.message(Command("help"))
async def cmd_help(message: types.Message, bot: Bot):
    if not await ensure_started(message):
        return

    HELP_TEXT = (
        "<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AutoCouriersStatusBot!</b>\n\n"
        "üîç *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "   ‚Ä¢ üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏;\n"
        "   ‚Ä¢ üöÄ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è;\n"
        "   ‚Ä¢ üîî Popup-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ;\n\n"
        "üî• *–ö–∞–∫ –Ω–∞—á–∞—Ç—å:* \n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.\n"
        "2Ô∏è‚É£ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìã –°—Ç–∞—Ç—É—Å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç.\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üè† –ë–∞–∑–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å.\n\n"
        "üèÅ *–ö–æ–º–∞–Ω–¥—ã –Ω–∞ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ:* \n"
        "  ‚Ä¢ /status ‚Äî –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º;\n"
        "  ‚Ä¢ /help   ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.\n\n"
        f"‚è∞ –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Å {config.WORK_START_STR} –¥–æ {config.WORK_END_STR} ({config.TIMEZONE}).\n"
        "üïí –í 01:00 —Å—Ç–∞—Ç—É—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è, –∏ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –Ω–æ–≤—É—é —Å–º–µ–Ω—É c 07:00."
    )

    if message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
        try:
            await bot.send_message(message.from_user.id, HELP_TEXT, parse_mode="HTML")
            await message.reply("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°.", show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
            await message.reply("‚ùó –û—Ç–∫—Ä–æ–π—Ç–µ –õ–° —Å–æ –º–Ω–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /help.")
        return

    await message.answer(HELP_TEXT, parse_mode="HTML")

# ‚Äî‚Äî‚Äî –ü–µ—Ä–µ—Ö–≤–∞—Ç /status –≤ –≥—Ä—É–ø–ø–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –∏ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ‚Äî‚Äî‚Äî
@router.message(Command("status"), lambda m: m.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP))
async def _status_group(m: types.Message, bot: Bot):
    await m.delete()
    await m.answer("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìã –°—Ç–∞—Ç—É—Å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç.")

@router.message(Command("status"))
async def cmd_status(message: types.Message, bot: Bot):
    # –í –≥—Ä—É–ø–ø–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
    if message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
        await message.delete()
        await message.answer("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìã –°—Ç–∞—Ç—É—Å¬ª –Ω–∏–∂–µ.")
        return

    # –í –õ–° ‚Äî –ª—é–±–æ–π –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç
    report = await StatusManager().get_report(bot)
    await message.answer(report, parse_mode="HTML")
