# handlers/callbacks.py

import logging
import time
from aiogram import Router, types, Bot

import config
from keyboards import get_status_keyboard
from core.database import Database
from utils.time_utils import in_work_time
from utils.status_manager import StatusManager

router = Router()
logger = logging.getLogger(__name__)
db = Database()


@router.callback_query(lambda cq: cq.data == "show_help")
async def show_help_popup(cq: types.CallbackQuery, bot: Bot):
    # –°–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ (–Ω–µ –±–æ–ª—å—à–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤)
    HELP_TEXT = (
        "üöÄ *AutoCouriersStatusBot*  \n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∫—É—Ä—å–µ—Ä–æ–≤  \n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –æ—Ç—á—ë—Ç—ã –≤ –ª–∏—á–∫—É  \n\n"
        "‚è∞ –°—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–Ω—ã —Å "
        f"{config.WORK_START_STR} –¥–æ {config.WORK_END_STR} ({config.TIMEZONE})"
    )
    await cq.answer(HELP_TEXT, show_alert=True)


@router.callback_query(lambda cq: cq.data == "show_status")
async def show_status_popup(cq: types.CallbackQuery, bot: Bot):
    report = StatusManager().get_report()  # —É–±—Ä–∞–ª–∏ as_table
    await cq.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –æ—Ç—á—ë—Ç –≤ –õ–°‚Ä¶", show_alert=True)
    await bot.send_message(cq.from_user.id, report, parse_mode="HTML")


@router.callback_query(lambda cq: cq.data is not None and cq.data.startswith("status_"))
async def on_status_callback(cq: types.CallbackQuery, bot: Bot):
    user = cq.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if not in_work_time():
        return await cq.answer(
            f"‚è∞ –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å {config.WORK_START_STR} –¥–æ {config.WORK_END_STR} ({config.TIMEZONE}).",
            show_alert=True
        )

    # –†–∞–∑–±–æ—Ä callback_data
    key = cq.data.split("status_", 1)[1]
    labels = {
        "base": "üè† –ë–∞–∑–∞",
        "away": "üöö –£–µ—Ö–∞–ª",
        "broke": "üîß –°–ª–æ–º–∞–ª—Å—è",
        "busy": "üìã –ü–æ –¥–µ–ª–∞–º",
        "fuel": "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞",
    }
    status_label = labels.get(key, key)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î —Å —Ç–∞–π–º—à—Ç–∞–º–ø–æ–º –∏ –∏–º–µ–Ω–µ–º
    db.save_status(user.id, status_label)  # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ id –∏ —Å—Ç–∞—Ç—É—Å
    logger.info(f"User {user.id} set status {status_label}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await cq.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {status_label}", show_alert=True)

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ ‚Äî –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await bot.send_message(
        config.GROUP_CHAT_ID,
        f"{user.full_name} ‚Äî {status_label}"
    )
