# handlers/callbacks.py
import logging
from typing import Optional
from aiogram import Router, types, Bot
from aiogram.exceptions import TelegramBadRequest
from config import TIMEZONE, AUTHORIZED_IDS, GROUP_CHAT_ID, WORK_START_STR, WORK_END_STR
from keyboards import get_status_keyboard
from core.database import Database
from utils.time_utils import in_work_time
from utils.status_manager import StatusManager

router = Router()
logger = logging.getLogger(__name__)
db = Database()

@router.callback_query(lambda cq: cq.data == "show_help")
async def show_help_popup(cq: types.CallbackQuery, bot: Bot):
    if not in_work_time():
        return await cq.answer(
            f"‚è∞ –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å {WORK_START_STR} –¥–æ {WORK_END_STR} ({TIMEZONE}).",
            show_alert=True
        )
    
    HELP_TEXT = (
        "üöÄ AutoCouriersStatusBot üöÄ\n\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∫—É—Ä—å–µ—Ä–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –æ—Ç—á—ë—Ç—ã –≤ –ª–∏—á–∫—É\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /help\n\n"
        f"‚è∞ –°—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–Ω—ã —Å {WORK_START_STR} –¥–æ {WORK_END_STR} ({TIMEZONE})"
    )
    
    try:
        await cq.answer(HELP_TEXT, show_alert=True)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        else:
            logger.error(f"Telegram API –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

@router.callback_query(lambda cq: cq.data == "show_status")
async def show_status_popup(cq: types.CallbackQuery, bot: Bot):
    if not GROUP_CHAT_ID or GROUP_CHAT_ID == 0:
        logger.warning("‚ùå GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
        return await cq.answer("‚ö†Ô∏è GROUP_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.", show_alert=True)
    
    try:
        report = StatusManager().get_report()
        await cq.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á—ë—Ç –≤ –õ–°‚Ä¶", show_alert=True)
        await bot.send_message(cq.from_user.id, report, parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞—é edit.")
        else:
            logger.error(f"Telegram API –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

@router.callback_query(lambda cq: cq.data.startswith("status_"))
async def on_status_callback(cq: types.CallbackQuery, bot: Bot):
    user = cq.from_user
    if user.id not in AUTHORIZED_IDS:
        return await cq.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å.", show_alert=True)
    
    if not in_work_time():
        return await cq.answer(
            f"‚è∞ –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Å {WORK_START_STR} –¥–æ {WORK_END_STR} ({TIMEZONE}).",
            show_alert=True
        )
    
    key = cq.data.split("status_", 1)[1]
    labels = {
        "base": "üè† –ë–∞–∑–∞",
        "away": "üöö –£–µ—Ö–∞–ª",
        "broke": "üîß –°–ª–æ–º–∞–ª—Å—è",
        "busy": "üìã –ü–æ –¥–µ–ª–∞–º",
        "fuel": "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞",
    }
    status_label = labels.get(key, key)
    
    try:
        db.save_status(user.id, status_label)
        logger.info(f"User {user.id} set status {status_label}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        return await cq.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
    
    try:
        await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"{user.full_name} ‚Äî {status_label}",
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        logger.error(f"Telegram API –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    
    await cq.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {status_label}", show_alert=True)
    
@router.callback_query(lambda cq: cq.data == "lighthouse")
async def on_lighthouse(cq: types.CallbackQuery):
    await cq.answer(
        "üìû –ö–ª–∏–µ–Ω—Ç –¢–∞—Ç—å—è–Ω–∞: +79857212682\n"
        "üìç –õ–∞–π—Ç –•–∞—É—Å 28 ‚Äî –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏, –≤–µ–∑—ë–º —Å—Ä–∞–∑—É!!!",
        show_alert=True
    )