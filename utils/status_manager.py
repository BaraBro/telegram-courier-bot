# utils/status_manager.py

from core.database import Database
from core.database import DB_FILE  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø—É—Ç—å –∏–ª–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging

logger = logging.getLogger(__name__)
_db = Database()

class StatusManager:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–∞–º –∫—É—Ä—å–µ—Ä–æ–≤."""

    def __init__(self):
        # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self._db = _db

    def set_status(self, user_id: int, status: str) -> None:
        """
        (–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—É—Ä—å–µ—Ä–∞.
        –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äì –∫–æ–ª–±–µ–∫–∏ —Å–∞–º–∏ –≤—ã–∑—ã–≤–∞—é—Ç db.save_status().
        """
        self._db.save_status(user_id, status)
        logger.info(f"Status saved: user {user_id} -> {status}")

    def get_report(self) -> str:
        """
        –°–æ–±—Ä–∞—Ç—å HTML-–æ—Ç—á—ë—Ç –≤–∏–¥–∞:
        <b>–û—Ç—á—ë—Ç —Å—Ç–∞—Ç—É—Å–æ–≤:</b>
        ‚Ä¢ User FullName ‚Äî —Å—Ç–∞—Ç—É—Å
        ‚Ä¢ ...
        """
        statuses = self._db.load_statuses()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict[str, str]
        if not statuses:
            return "<b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º.</b>"

        parts = ["<b>üìã –û—Ç—á—ë—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤:</b>\n"]
        for uid_str, status in statuses.items():
            try:
                uid = int(uid_str)
                # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å user.full_name —á–µ—Ä–µ–∑ Telegram API,
                # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º ID
                parts.append(f"‚Ä¢ <code>{uid}</code> ‚Äî {status}")
            except ValueError:
                parts.append(f"‚Ä¢ {uid_str} ‚Äî {status}")
        return "\n".join(parts)
